#ifdef GECKO_JIT_TEST

#define KURIBO_ENABLE_LOG

#include <array>
#include <engine/compiler.hpp>

#include <EASTL/vector.h>
#include <debug/log.h>

#include <memory/heap.hxx>

#include <core/patch.hxx>
#include <core/sync.hxx>

#include <cstdio>

#include <mutex>

const static std::array<u32, 158 * 2 + 41 * 2> SomeCode {
  0xC2518AEC, 0x00000008, 0x7D6802A6, 0xA0030004, 0x7C040000, 0x41810008,
      0x48000028, 0x48000015, 0x428A0000, 0x428A0000, 0x428A0000, 0xFFFF0000,
      0x7CA802A6, 0xB0850010, 0x7D6803A6, 0x4E800020, 0x7D6803A6, 0x00000000,

      0x06000300, 0x00000018, 0x7C7043A6, 0x7C7A02A6, 0x38630004, 0x7C7A03A6,
      0x7C7042A6, 0x4C000064,

      0xC265BBD4, 0x00000004, 0x899B001C, 0x7D9E6214, 0x2C0C00E0, 0x41A0000C,
      0x38000000, 0x981B0019, 0x881B0019, 0x00000000,

      0x0889089D, 0x00000062, 0x00020048, 0x00000000,

      0x088908A9, 0x00000062, 0x00020048, 0x00000000,

      0x04644338, 0x2803007F,

      0xC2760A88, 0x00000005, 0x2C030000, 0x4182000C, 0x81830000, 0x48000014,
      0x7D8802A6, 0x398C0034, 0x7D8803A6, 0x4E800020, 0x60000000, 0x00000000,

      0x040077C8, 0x4E800020,

      0xC2091350, 0x00000002, 0x3FE07FFF, 0x63FFFFFF, 0x93FD0074, 0x00000000,

      0x0462E058, 0x4B9D2DC0,

      0x06000E18, 0x0000002C, 0x7FE3FB78, 0x3880006B, 0x48621EE9, 0x7FE3FB78,
      0x3880006C, 0x48621EDD, 0x7FE3FB78, 0x3880006D, 0x48621ED1, 0x7FE3FB78,
      0x4862D21C, 0x00000000,

      0x04000EB0, 0x808B77B8,

      0x06000EBC, 0x00000020, 0xFFFFFFFF, 0x80000EC4, 0x3AA00001, 0x3E808000,
      0x92B40EAC, 0x3AA00000, 0x3A800000, 0x485BD480,

      0xC2622E28, 0x00000010, 0x3EC08000, 0x3A600000, 0x82D60EAC, 0x7C13B000,
      0x41820068, 0x3EC08000, 0x82D60EA4, 0x7C16F000, 0x40820058, 0x3EC08000,
      0x83D60EA8, 0x92760EAC, 0x82760EA8, 0x82D60EA0, 0x82D60248, 0x3AD6006C,
      0x92D3090C, 0x92D30848, 0x3CA00100, 0x90B300D4, 0x3E608000, 0x82730EA0,
      0x827301B8, 0x92D306F0, 0x3E608000, 0x82730EA0, 0x827301BC, 0x92D306C4,
      0x3A600000, 0x3AC00000, 0x54C0103A, 0x00000000,

      0xC262E0D0, 0x0000000A, 0x7FE3FB78, 0x3E808000, 0x90740EA0, 0x826301C0,
      0x92740EA4, 0x826301B4, 0x92740EA8, 0x8263024C, 0x82730024, 0x82730008,
      0x3A400EB0, 0x7E949214, 0x929301BC, 0x82730224, 0x3E808000, 0x92740EB4,
      0x3E600000, 0x3E800000, 0x3A400000, 0x00000000, 0xC25F2E88, 0x00000005,
      0x90830178, 0x3CA0805F, 0x39600018, 0x2C040003, 0x4182000C, 0x656B4182,
      0x48000008, 0x656B4800, 0x9165EFBC, 0x00000000, 0x04719920, 0x60000000,
      0x0471992C, 0x60000000, 0x04856560, 0x60000000, 0x0470B2D0, 0x281F0002,
      0x04549974, 0x38600001, 0x0289003C, 0x00001E0E, 0x04890048, 0x2D180600,
      0x04890054, 0x3C241004, 0x06890060, 0x00000060, 0x4B2D190A, 0x05000000,
      0x00000000, 0x5A3C2412, 0x06000000, 0x00000000, 0x69463123, 0x15070000,
      0x00000000, 0x78584030, 0x20100800, 0x00000000, 0x87634836, 0x241B1209,
      0x00000000, 0x96786450, 0x3C281E14, 0x0A000000, 0xA5846E58, 0x42372C21,
      0x160B0000, 0xB4907860, 0x54483C30, 0x24180C00, 0x04653644, 0x38A04E4D,
      0x046536B0, 0x38C04E4D, 0x0465920C, 0x38E04E4D, 0x04659260, 0x38E04E4D,
      0x04659724, 0x38E04E4D, 0x04659778, 0x38E04E4D, 0x0465A034, 0x3880004D,
      0x0465A080, 0x3880004D, 0x0264B982, 0x00000005, 0x0464BA10, 0x60000000,
      0x0464BA38, 0x60000000, 0x0464BA50, 0x60000000, 0x0464BA5C, 0x60000000,
      0x0264BC12, 0x00000001, 0x0264BC3E, 0x00000484, 0x0264BC4E, 0x000010D7,
      0x0264BCB6, 0x00000484, 0x0264BCC2, 0x000010D7, 0xC26513E0, 0x00000015,
      0x88830184, 0x2C040045, 0x41820024, 0x2C04004A, 0x4182002C, 0x2C04004B,
      0x4182001C, 0x2C040050, 0x41820038, 0x3880000F, 0x48000078, 0x38800001,
      0x48000070, 0x38800005, 0x48000068, 0x89830178, 0x2C0C0080, 0x41A2FFE0,
      0x2C0C00FF, 0x41820030, 0x38800000, 0x4800004C, 0x89830178, 0x2C0C0041,
      0x4182003C, 0x2C0C005F, 0x41820034, 0x2C0C00FF, 0x4182001C, 0x38800002,
      0x48000028, 0x8983017C, 0x2C0C0011, 0x41A2FFA0, 0x4BFFFFC8, 0x8983017C,
      0x2C0C00E6, 0x41820008, 0x4BFFFFDC, 0x38800003, 0x60000000, 0x00000000,
      0x0461AF98, 0x60000000, 0xC257B9B0, 0x00000004, 0xC00459F4, 0x3E808170,
      0xC3940000, 0xEC1C0032, 0xFF80E890, 0x3A800000, 0x60000000, 0x60000000,
      0xC2578558, 0x00000004, 0xC00959F4, 0x3E808170, 0xC3940000, 0xEC1C0032,
      0xFF80E890, 0x3A800000, 0x60000000, 0x60000000, 0xC25858C8, 0x00000004,
      0xC00559F8, 0x3E808170, 0xC3940000, 0xEC1C0032, 0xFF80E890, 0x3A800000,
      0x60000000, 0x60000000,

      // NoFlick
      0xC2022268, 0x00000004, 0x3D80CC00, 0x8ACC201D, 0x56D6801E, 0xA18C201E,
      0x7D8CB378, 0x558C2834, 0x658C8000, 0x00000000,
      // 0xC200A430, 0x00000008,
      // 0x9421FF80, 0xBC610008,
      // 0x806DA360, 0x80630044,
      // 0x80630000, 0x3D808002,
      // 0x618C2480, 0x7D8803A6,
      // 0x4E800021, 0x38000001,
      // 0x3C608000, 0x98030FFF,
      // 0xB8610008, 0x38210080,
      // 0x80010014, 0x00000000,
      // Benchmark
      0xC200957C, 0x00000023, 0x7C0802A6, 0x90010004, 0x9421FFA0, 0xBEE10008,
      0x3C00801A, 0x600065AC, 0x7C0903A6, 0x4E800421, 0x7C7C1B78, 0x3F208000,
      0x88190FFE, 0x2C000000, 0x418100B8, 0x88190FFF, 0x2C000000, 0x418200AC,
      0x83190FF4, 0x38000001, 0x98190FFE, 0x80190FF8, 0x7C0903A6, 0x7FEC42E6,
      0x4E800421, 0x7FCC42E6, 0x7FBFF050, 0x7F18EA14, 0x93190FF4, 0x38000000,
      0x98190FFE, 0xA0790FFC, 0x2C03012C, 0x38630001, 0xB0790FFC, 0x41A00014,
      0x38600000, 0xB0790FFC, 0x90790FF4, 0x93190FF0, 0x82F90FF0, 0x48000011,
      0x5469636B, 0x733A2025, 0x64000000, 0x7F4802A6, 0x38600009, 0x388000C8,
      0x38A00001, 0x7F46D378, 0x7EE7BB78, 0x4CC63182, 0x3C008002, 0x60001E90,
      0x7C0903A6, 0x4E800421, 0x3C008002, 0x60001E70, 0x7C0903A6, 0x4E800421,
      0x7F83E378, 0x3C00801A, 0x600065D4, 0x7C0903A6, 0x4E800421, 0xBAE10008,
      0x38210060, 0x80010004, 0x7C0803A6, 0x88150068, 0x60000000, 0x00000000,
#if 0
0xC257B9A0, 0x00000004,
0xC00459F8, 0x3E808170,
0xC3940000, 0xEC1C0032,
0xFF80E890, 0x3A800000,
0x60000000, 0x60000000,
0xC257BBC4, 0x00000004,
0xC01E0108, 0x3E808170,
0xC3940000, 0xEC1C0032,
0xFF80E890, 0x3A800000,
0x60000000, 0x60000000,
0xC257BD80, 0x00000004,
0xC0030004, 0x3E808170,
0xC3740000, 0xEC1B0032,
0xFF60E890, 0x3A800000,
0x60000000, 0x60000000,
0xC257BD5C, 0x00000004,
0xC0030014, 0x3E808170,
0xC3740000, 0xEC1B0032,
0xFF60E890, 0x3A800000,
0x60000000, 0x60000000,
0xC25921AC, 0x00000004,
0xC0230024, 0x3E808170,
0xC3940000, 0xEC3C0072,
0xFF80E890, 0x3A800000,
0x60000000, 0x60000000,
0xC25921BC, 0x00000004,
0xC0230028, 0x3E808170,
0xC3940000, 0xEC3C0072,
0xFF80E890, 0x3A800000,
0x60000000, 0x60000000,
0xC25921CC, 0x00000004,
0xC023002C, 0x3E808170,
0xC3940000, 0xEC3C0072,
0xFF80E890, 0x3A800000,
0x60000000, 0x60000000,
0xC25921DC, 0x00000004,
0xC0230030, 0x3E808170,
0xC3940000, 0xEC3C0072,
0xFF80E890, 0x3A800000,
0x60000000, 0x60000000,
0xC259218C, 0x0000001D,
0xC0230018, 0x3E80809C,
0x8294D6E8, 0x8294003C,
0x82940000, 0x82940000,
0x82940000, 0xA274000A,
0x5673801E, 0x2C130000,
0x40820008, 0x3E603F80,
0x3E808170, 0x92740000,
0x3E600000, 0xC3940000,
0xEC3C0072, 0x3E808160,
0x3E6042D2, 0x92740004,
0x3E604296, 0x92740008,
0x3E604382, 0x9274000C,
0x3E604302, 0x92740010,
0x3E60491C, 0x62734000,
0x92740014, 0x3E604302,
0x92740018, 0x60000000,
0xC3D40004, 0xEFDC07B2,
0x3E60808A, 0xD3D35DC0,
0xC3D40008, 0xEFDC07B2,
0xD3D35AB0, 0xC3D4000C,
0xEFDC07B2, 0xD3D35BC4,
0xC3D40010, 0xEFDC07B2,
0xD3D35C24, 0xC3D40014,
0xEFDC07B2, 0xD3D35C34,
0xC3D40018, 0xEFDC07B2,
0xD3D35ABC, 0x60000000,
0xFFC0E890, 0x3E600000,
0x60000000, 0xFF80E890,
0x3A800000, 0x60000000,
0x040ECAAC, 0x3BC00000,
0x040ED868, 0x60000000,
0xC20EE3A0, 0x0000000A,
0x2C030000, 0x40810040,
0x8061000C, 0x800D9738,
0x2C000002, 0x41820014,
0x906DA14C, 0x38000002,
0x900D9738, 0x48000020,
0x38830003, 0x5484003A,
0x88A40000, 0x7CA42A14,
0x7C0028AC, 0x7CA803A6,
0x4E800021, 0x3860FFFF,
0x2C030000, 0x00000000,
0xC21D4EFC, 0x00000016,
0x808DA14C, 0x28040001,
0x408100A0, 0x9421FF80,
0x38610020, 0x3C00801D,
0x600024F4, 0x7C0803A6,
0x4E800021, 0x38610020,
0x808DA14C, 0x38A00554,
0x90BC00C4, 0x3C00801D,
0x60002544, 0x7C0803A6,
0x4E800021, 0x38610020,
0x38810010, 0x3C00801D,
0x600025F8, 0x7C0803A6,
0x4E800021, 0x48000018,
0x0FFF1F07, 0x00E638C9,
0x49FBEFFA, 0x79022D3A,
0x84AB134F, 0x7C6802A6,
0x3881000C, 0x38A00005,
0x7CA903A6, 0x84A30004,
0x84C40004, 0x7C062800,
0x40820008, 0x4200FFF0,
0x7C062800, 0x38210080,
0x808DA14C, 0x41820000,
0x38800000, 0x00000000,
0x0627A404, 0x00000018,
0x3A2F2F63, 0x612E6E61,
0x732E7769, 0x696D6D66,
0x692E6465, 0x2F636100,
0x0627A42C, 0x00000018,
0x3A2F2F6E, 0x61737769,
0x692E7769, 0x696D6D66,
0x692E6465, 0x2F616300,
0x0627A450, 0x0000001A,
0x3A2F2F6D, 0x61696E2E,
0x6E61732E, 0x7769696D,
0x6D66692E, 0x64652F70,
0x70000000, 0x00000000,
0x0627A4AC, 0x00000018,
0x3A2F2F6E, 0x61737769,
0x692E7769, 0x696D6D66,
0x692E6465, 0x2F707200,
0x0627AD68, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627B4D8, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627BEF0, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627D091, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627DCAB, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627DCC7, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627DCE3, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627DE33, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x0627DEB7, 0x0000000B,
0x7769696D, 0x6D66692E,
0x64650000, 0x00000000,
0x04384FD0, 0x31323030,
0x02384FD4, 0x00003435,
0x0253EC8E, 0x00002A30,
0x06001600, 0x000000B8,
0x38E00008, 0x48000024,
0x38E0000B, 0x4800001C,
0x38E0000D, 0x48000014,
0x38E0000A, 0x4800000C,
0x38E0000F, 0x48000004,
0x9421FFF0, 0x7C0802A6,
0x90010014, 0x80C30004,
0x3C80809C, 0x80843618,
0x80840014, 0x38600000,
0x80A40000, 0x7C053000,
0x41820018, 0x38840248,
0x38630001, 0x2C03000C,
0x41820040, 0x4BFFFFE4,
0x7C832378, 0x80830090,
0x2C040003, 0x4182000C,
0x38840001, 0x90830090,
0x3C80809C, 0x608436B8,
0x1CE7001C, 0x7C84382E,
0x2C040000, 0x4182000C,
0x7C8903A6, 0x4E800421,
0x3860FFFF, 0x80010014,
0x7C0803A6, 0x38210010,
0x4E800020, 0x00000000,
0x047A66C4, 0x60000000,
0x04796D30, 0x38600000,
0x08790EF0, 0x39800001,
0x20030004, 0xFFE00000,
0x048B54B8, 0x80001600,
0x048B54D0, 0x80001608,
0x088B54F4, 0x80001610,
0x2002000C, 0x00000008,
0xC0000000, 0x00000011,
0x7D8802A6, 0x48000015,
0x809BD730, 0x809BD728,
0x800001B0, 0x3F800000,
0x7C6802A6, 0xC003000C,
0x81430008, 0x81630004,
0x816B0000, 0x80630000,
0x80630000, 0x2C030000,
0x41820040, 0x892B0B84,
0x5529103A, 0x80A30018,
0x88A50000, 0x54A5103A,
0x8063000C, 0x7CA3282E,
0x7D23482E, 0xC045000C,
0xC069000C, 0xEC421828,
0x38600000, 0xFC020000,
0x40A10008, 0x38600001,
0x906A0000, 0x7D8803A6,
0x4E800020, 0x00000000,
0x047A92B0, 0x4E800020,
0x048A5BC4, 0x44820000,
0xC27AE8A8, 0x00000003,
0x3C60809C, 0x60633670,
0x38800384, 0x90830038,
0x60000000, 0x00000000,
0x048B59F4, 0x435C0000,
0x048B59F8, 0x435C0000,
0xC25328B0, 0x00000002,
0x38000007, 0x98040B8D,
0x60000000, 0x00000000,
0xC2723D50, 0x00000007,
0x4800002D, 0x00000000,
0x00000000, 0x00000000,
0x3F800000, 0x40000000,
0x40400000, 0x40800000,
0x40A00000, 0x40C00000,
0x40E00000, 0x7CA802A6,
0x38800003, 0x00000000,
0x045336B8, 0x60000000,
0x04534350, 0x60000000,
0x04534BBC, 0x60000000,
0x04723D10, 0x281D0009,
0x04723D40, 0x3BA00009,
0x0453F6C4, 0x38E40032,
0x048A5DBC, 0x43200000,
0x0453F3B8, 0x60000000,
0x0453F478, 0x4800000C,
0x283457E2, 0x00000710,
0x0453F478, 0x60000000,
0xE0000000, 0x00000000,
0x28348200, 0x000011E0,
0x0453F478, 0x60000000,
0xE0000000, 0x00000000,
0x28348200, 0x00001160,
0x0453F478, 0x60000000,
0xE0000000, 0x00000000,
0x28345842, 0x00002610,
0x0453F478, 0x60000000,
0xE0000000, 0x80008000,
0x047F7F88, 0x60000000,
0x047F4DB8, 0x38000001,
0x047AE8A8, 0x60000000,
0x047BABF8, 0x38A0000A,
0x027B1DD2, 0x00000080,
0xC2661CB8, 0x00000002,
0x3B800002, 0x9B9D003F,
0x60000000, 0x00000000,
0x026460BA, 0x00000001,
0x0264F51E, 0x00000001,
0x047B5E58, 0x60000000,
0x04892320, 0x4FFFFFFF,
0xC2591FE8, 0x00000003,
0x80A40004, 0x2C1E0012,
0x41800008, 0x38A00002,
0x60000000, 0x00000000,
0x04828EDC, 0x60000000,
0x048A589C, 0x7F000000,
0x048A58A4, 0x7F000000,
0x047F92A8, 0x38800002,
0x047BB028, 0x38800002,
0x047BB120, 0x38800002,
0x047BB1F8, 0x38800002,
0x047BB534, 0x38800002,
0x047BBB50, 0x38800002,
0x008A538F, 0x0000001B,
0x008A56EB, 0x0000001B,
0x008A5D47, 0x00000014,
0x008A5A3F, 0x00000014,
0x008A548B, 0x00000009,
0x008D1FEF, 0x00000006,
0x008D2627, 0x00000006,
0x008D1E8F, 0x00000006,
0x008D209F, 0x00000006,
0x008A5E1B, 0x00000004,
0x008A5B3B, 0x00000004,
0x0482AC00, 0x3B800001,
0x04002FF8, 0x3F800000,
0x04002FFC, 0x3FC00000,
0xC256AFEC, 0x00000008,
0xC0240040, 0x822400D0,
0x2C110001, 0x4182002C,
0x3E008000, 0x62102FF8,
0xC2100000, 0xFC018040,
0x41800010, 0xC2100004,
0xFC210432, 0xD0240040,
0x3A200001, 0x922400D0,
0x60000000, 0x00000000,
0xC6580630, 0x80001000,
0x06001000, 0x00000020,
0x487976B5, 0x3C60809C,
0x880338B9, 0x2C000000,
0x4182000C, 0x38600008,
0x3880000C, 0x4857F618,
0x027A5BF6, 0x00000FFF,
0x027A4ACA, 0x00000FFF,
0x047BA164, 0x90770020,
0x200001B0, 0x00000001,
0xC27BA164, 0x0000000D,
0x2C030000, 0x40A20008,
0x38600006, 0x2C030010,
0x40A20008, 0x3860000F,
0x2C030001, 0x40A20008,
0x38600007, 0x2C030011,
0x40A20008, 0x3860000A,
0x2C030002, 0x40A20008,
0x3860000B, 0x2C030012,
0x40A20008, 0x38600009,
0x2C030003, 0x40A20008,
0x38600005, 0x2C03000C,
0x40A20008, 0x3860000E,
0x90770020, 0x00000000,
0xE0000000, 0x80008000,
0x047BA5D0, 0x60000000,
0xC656779C, 0x800001C0,
0x060001C0, 0x00000028,
0x3C608000, 0x886301F0,
0x2C030000, 0x41820018,
0x2C160007, 0x41820010,
0x2C160008, 0x41820008,
0x48567614, 0x485675BC,
0xC2572770, 0x00000004,
0x3DE08000, 0x2C030000,
0x40820008, 0x38600001,
0x39800001, 0x998F01F0,
0x60000000, 0x00000000,
0xC25A22C4, 0x00000004,
0x3C808000, 0x8B8401F0,
0x2C1C0001, 0x41820008,
0xA01D0334, 0x3B800000,
0x9B8401F0, 0x00000000,
0xC27BC450, 0x00000004,
0x801D0004, 0x2C000008,
0x4182000C, 0x2C00000D,
0x40A20008, 0x38000005,
0x60000000, 0x00000000,
0x007BA077, 0x00000000,
0x008A5883, 0x00000007,
0x008A5887, 0x00000003,
0x008A5893, 0x00000003,
0x048A5894, 0x00000000,
0x0485C914, 0x38000000,
0x0485D460, 0x4BF984FD,
0xC25340A8, 0x00000002,
0x3980FFD5, 0xB1830024,
0x60000000, 0x00000000,
0xC27F84F8, 0x00000006,
0x3F40809C, 0x835AD728,
0x8B5A0B84, 0x575A103A,
0x3F80809C, 0x839CD730,
0x839C000C, 0x7F9CD02E,
0x8B9C0025, 0x7F9C0774,
0x3B9C002B, 0x00000000,
0xC253511C, 0x00000003,
0x887D001C, 0x28030001,
0x40A10008, 0x7FC0F378,
0x7C1E0040, 0x00000000,
0x048D1290, 0x000000B4,
0x048D1294, 0x42F00000,
0x280016BA, 0x00000001,
0x0438900C, 0x00000000,
0x04635670, 0x38000000,
0x04896830, 0x00000000,
0xE0000000, 0x80008000,
0x280016BC, 0x00000001,
0xC27EB164, 0x00000006,
0x2C03002A, 0x40800024,
0x2C060000, 0x41820018,
0x3D80809C, 0x818C20D8,
0x818C0028, 0x2C0C0000,
0x41820008, 0x3860002C,
0x2C030018, 0x00000000,
0xE0000000, 0x80008000,
0x280016BE, 0x00000001,
0x048A1D48, 0x30000000,
0xE0000000, 0x80008000,
0x280016C0, 0x00000001,
0x048D3E14, 0x47927C00,
0xE0000000, 0x80008000,
0x280016C4, 0x00000001,
0xC2661DE0, 0x00000003,
0x819F0000, 0x2C0C0003,
0x41800008, 0x38600000,
0x3800000C, 0x00000000,
0xE0000000, 0x80008000
#endif
};

static u8* pSimulatedHeap;
constexpr u32 simulatedHeapSize = 1024 * 8;

struct Timer {
  void begin() { tick_begin = get_tick(); }
  void end(bool force_report = false) {
    const auto tick_end = get_tick();
    const auto duration = tick_end - tick_begin;
    total_ticks += duration;
    num_steps += 1;

    if (num_steps % 600 == 0 || force_report) {
      report_time(duration);
      num_steps = 0;
      if (!force_report)
        total_ticks = 0;
    }
  }
  void report_time(u32 time) const {
    const u32 ps = ticks_to_microsecs(time);
    const u32 ns = ticks_to_nanosecs(time);
    KURIBO_LOG_FUNCTION("Took %u ticks, %u microseconds, %u nanoseconds \n",
                        time, ps, ns);
  }

  u32 tick_begin = 0;

  u32 num_steps = 0;
  u32 total_ticks = 0;
};

Timer gTimer;

void eachFrameCaller() {
  kuribo::Critical g;

  gTimer.begin();
#ifdef CACHE_SAFE
  // Some codes change their own instructions...
  for (int i = 0; i < simulatedHeapSize; i += 32)
    kuribo::flushAddr(pSimulatedHeap + i);
#endif
  ((void (*)(void))pSimulatedHeap)();
  gTimer.end();
}

void GeckoJIT_RunTests() {
  kuribo::Critical g;

  {
    KURIBO_SCOPED_LOG("Allocating block");

    pSimulatedHeap = new u8[simulatedHeapSize];
  }

  {
    KURIBO_SCOPED_LOG("Zeroing block");

    // memset(pSimulatedHeap, 0, simulatedHeapSize);
    // static_assert(simulatedHeapSize % 32 == 0);
    // std::array<u32, 8>* ptr = reinterpret_cast<std::array<u32,
    // 8>*>(pSimulatedHeap); for (u32 i = 0; i < simulatedHeapSize / 32; ++i) {
    //   ptr[i] = {};
    // }
    static_assert(simulatedHeapSize % 4 == 0);
    auto* ptr = reinterpret_cast<std::array<u32, simulatedHeapSize / 4>*>(
        pSimulatedHeap);
    *ptr = {};
  }

  {
    KURIBO_SCOPED_LOG("Flushing block");

    for (int i = 0; i < simulatedHeapSize; i += 32)
      kuribo::flushAddr(pSimulatedHeap + i);
  }

  {
    KURIBO_SCOPED_LOG("Compiling code");

    gecko_jit::JITEngine engine(pSimulatedHeap, simulatedHeapSize);

    if (gecko_jit::BeginCodeList(engine)) {
      const bool success =
          gecko_jit::CompileCodeList(engine, &SomeCode[0], SomeCode.size() * 4);
      KURIBO_ASSERT(success && "Failed to compile codelist");

      gecko_jit::EndCodeList(engine);
    }

    {
      KURIBO_SCOPED_LOG("Returning remaining memory.");
      auto leftover = engine.computeRemaining();
      const auto size = reinterpret_cast<char*>(leftover.end) -
                        reinterpret_cast<char*>(leftover.begin);

      // kuribo::mem::AddRegion(leftover.begin, size, false);
    }
  }

  {
    KURIBO_SCOPED_LOG("Flushing block");

    for (int i = 0; i < simulatedHeapSize; i += 32)
      kuribo::flushAddr(pSimulatedHeap + i);
  }

  KURIBO_LOG("Our megafunction begins at: %p\n", pSimulatedHeap);
#if 0
  u32* u32Heap = (u32*)pSimulatedHeap;
  for (int i = 0; i < simulatedHeapSize / 4; ++i) {
    if (u32Heap[i] == 0)
      break;
    KURIBO_LOG("DATA: %x %p\n", i * 4, u32Heap[i]);
  }
#endif

#ifdef _WIN32
  FILE* pFile = fopen("compiled.bin", "wb");

  for (int i = 0; i < simulatedHeapSize; i += 4) {
    std::swap(pSimulatedHeap[i], pSimulatedHeap[i + 3]);
    std::swap(pSimulatedHeap[i + 1], pSimulatedHeap[i + 2]);
  }
  fwrite(&pSimulatedHeap[0], 1, simulatedHeapSize, pFile);
  fclose(pFile);
#endif

#ifndef _WIN32
  u32* viHookBlr = nullptr;

  {
    KURIBO_SCOPED_LOG("Searching for VI hook");

    viHookBlr = FindHookInMemory(gecko_jit::GeckoHookType::VI_WII);
  }

  KURIBO_LOG("Found VI Hook begin at... %p\n", viHookBlr);
  kuribo::directBranchEx(viHookBlr, (void*)(u32)&eachFrameCaller, false);
#define setupFB ((void* (*)(void* fb))0x80022480)

  void* fb = (void*)((u32**)0x802A4080)[17][0];
  setupFB(fb);
  *((u8*)0x80000FFF) = 1;

  *((void**)0x80000FF8) = pSimulatedHeap;
#endif
}

#endif